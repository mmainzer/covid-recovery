// for the scrollytelling portion with the svg

window.onload=function(){
	a = document.getElementById('svgChartObject');
	svgDoc = a.contentDocument;
	annOne = svgDoc.getElementsByClassName('annotation-1');
	annTwo = svgDoc.getElementsByClassName('annotation-2');
	annThree = svgDoc.getElementsByClassName('annotation-3');
	annFour = svgDoc.getElementsByClassName('annotation-4');
	annFive = svgDoc.getElementsByClassName('annotation-5');
	path = svgDoc.getElementsByClassName('cls-7');
	line = path[0];
	pathLength = line.getTotalLength();
	// Make very long dashes (the length of the path itself)
	line.style.strokeDasharray = pathLength + ' ' + pathLength;
	// Offset the dashes so the it appears hidden entirely
	line.style.strokeDashoffset = pathLength;
	// Get height of last two steps to determine length of scroll for line animation
	stepFr = document.getElementById('4');
};

const scroller = scrollama();

function stepEnter(response) {
	console.log(response.element.id);
	if (response.direction === 'down') {
		if (response.element.id === '1') {
			$(response.element).addClass('is-active');
			// show dates and national emergency annotation
			console.log(annOne);
			for (var i = 0; i < annOne.length; i++) {
			    annOne[i].style.display = 'block';
			}
		} else if (response.element.id === '2') {
			$(response.element).addClass('is-active');
			// show cases tick labels and bars
			for (var i = 0; i < annTwo.length; i++) {
			    annTwo[i].style.display = 'block';
			    $(annTwo[i]).attr("fill","#CBC9E2");
			}
			for (var i = 0; i < annThree.length; i++) {
			    annThree[i].style.display = 'block';
			}
		} else if (response.element.id === '3') {
			$(response.element).addClass('is-active');
			for (var i = 0; i < annFour.length; i++) {
			    annFour[i].style.display = 'block';
			}
		} else if (response.element.id === '4') {
			$(response.element).addClass('is-active');
			// draw 7-day average and reveal label
			// When the page scrolls...
			$(window).scroll(function() {
			  // need to calculate what percentage of the step div is through
			  // but since this doesn't trigger until half of it is already through
			  // you need to subtract 50% from the percentage that is ultimately calculated	
			  // from this here https://stackoverflow.com/questions/46851076/calculate-what-percentage-of-a-specific-element-has-been-scrolled-into-view
			  var windowBottom = $(this).scrollTop() + $(this).height();
			  var stepTop = $(stepFr).offset().top;
			  var percent = ( (windowBottom - stepTop) / $(stepFr).height() ) - 0.5;
			  
			  // Length to offset the dashes
			  var drawLength = pathLength * percent;
			  
			  // Draw in reverse
			  line.style.strokeDashoffset = pathLength - drawLength;
			    
			  // When complete, remove the dash array, otherwise shape isn't quite sharp
			 // Accounts for fuzzy math
			  if (percent >= 0.99) {
			    line.style.strokeDasharray = "none";
			  }
			  
			});

		} else if (response.element.id === '5') {
			$(response.element).addClass('is-active');
			for (var i = 0; i < annFive.length; i++) {
			    annFive[i].style.display = 'block';
			}
		}
	}
}

scroller.setup({
	step: '.step',
	debug: false,
	offset: 0.67
})
.onStepEnter(stepEnter);