// for line charts filtered by geography selection

// set the dimensions and margins for the chart
let margin = {top: 10, right: 30, bottom: 30, left: 60},
    width = 460 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

// append the svg object to the body of the page
const svg = d3.select("#casesLine")
			  .append("svg")
			    .attr("width", width + margin.left + margin.right)
			    .attr("height", height + margin.top + margin.bottom)
			  .append("g")
			    .attr("transform",
			          "translate(" + margin.left + "," + margin.top + ")");

// date parser
const parser = d3.timeParse("%m-%d-%Y");

// read the data
d3.csv('https://raw.githubusercontent.com/mmainzer/covid-recovery/master/application/app-data/covid.csv', d3.autoType)
	.then(function(data) {
		// format dates correctly
		// data.forEach(function(d) {
		// 	d.date = parser(d.date);
		// });

		// list of areas to filter by
		const areas = d3.map(data, function(d){return(d.area_name)}).keys()

		// add x axis --> it is a date format
		let x = d3.scaleBand()
					.range([ 0, width ])
					.domain(data.map(function(d) { return d.dateTwo; }))
					.padding(0.2);

		// let xAxis = d3.axisBottom(x).tickValues(x.domain());
		let xAxis = d3.axisBottom(x).tickValues(x.domain().filter(function(d,i){ return !(i%51)}));

		svg.append("g")
				.attr( "transform", "translate(0," + height + ")" )
				.call(xAxis);

		// add y axis
		let y = d3.scaleLinear().range([height, 0]);
		y.domain([0, d3.max(data, function(d) { return d.daily_cases; }) + 5]);

		svg.append("g")
				.attr("class","y axis")
				.call(d3.axisLeft(y).ticks(5));

		// create the bar chart
		let bars = svg.selectAll("barCases")
						.data(data.filter(function(d){return d.area_name==areas[0]}))
						.enter()
						.append("rect")
						.attr("class", "bar cases")
						.attr("x", function(d) { return x(d.dateTwo); })
					    .attr("y", function(d) { return y(d.daily_cases); })
					    .attr("width", x.bandwidth())
					    .attr("height", function(d) { return height - y(d.daily_cases); })
					    .attr("fill", "#69b3a2")
					    .attr("border-color", "black")


		// initialize line with the first group of the list
		let line = svg
					.append('g')
					.append("path")
						.datum(data.filter(function(d){return d.area_name==areas[0]}))
						.attr("d", d3.line()
							.x(function(d) { return x(d.dateTwo) })
							.y(function(d) { return y(+d.daily_cases )})
						)
						.attr( "stroke", "black" )
						.attr( "stroke-width", 3 )
						.style( "fill", "none" )

		// function to update chart on geography select
		function update(selectedGeo) {

			// create new data with the selection
			var dataFilter = data.filter(function(d){return d.area_name==selectedGeo})

			// create new min and max for the y axis
			y.domain([0, d3.max(dataFilter, function(d) { return d.daily_cases; }) + 5]);

			// give new data to bars for updat
			bars
				.data(dataFilter)
				.transition()
				.duration(1000)
				.attr("y", function(d) { return y(d.daily_cases); })
				.attr("height", function(d) { return height - y(d.daily_cases); });


			// give new data to line for update
			// line
			// 	.datum(dataFilter)
			// 	.transition()
			// 	.duration(1000)
			// 	.attr("d", d3.line()
			// 		.x(function(d) { return x(d.date) })
			// 		.y(function(d) { return y(d.daily_cases ) })
			// 	)

			// add an update to the y axis
			svg.select(".y.axis")
				.transition()
				.duration(1000)
				.call(d3.axisLeft(y).ticks(5));
		}

		// when the geography level is selected, the actual geography value will have changed
		// but jquery will not recognize this, so we have to make it explicit
		$("#level-select").change(function() {
			var selectedOption = $("#geo-select option").first().text();
			update(selectedOption);
		});


		// when the drop down select is changed, run the update chart function
		$("#geo-select").change(function() {
			// recover selected option
			var selectedOption = d3.select(this).property("value")
			// run the updated chart function with this selected option
			update(selectedOption);

		});

})