// for line charts filtered by geography selection

// set the dimensions and margins for the chart
let margin = {top: 10, right: 30, bottom: 30, left: 60};
let height = $(window).height() * .5;
let width = $(window).width() * .28;

width = width - margin.left - margin.right,
height = height - margin.top - margin.bottom;

// append the svg object for cases chart
const svgCases = d3.select("#casesLine")
			  .append("svg")
			    .attr("width", width + margin.left + margin.right)
			    .attr("height", height + margin.top + margin.bottom)
			  .append("g")
			    .attr("transform",
			          "translate(" + margin.left + "," + margin.top + ")");

// append the svg object to the body of the page
const svgDeaths = d3.select("#deathsLine")
			  .append("svg")
			    .attr("width", width + margin.left + margin.right)
			    .attr("height", height + margin.top + margin.bottom)
			  .append("g")
			    .attr("transform",
			          "translate(" + margin.left + "," + margin.top + ")");

// date parser
const parser = d3.timeParse("%m-%d-%Y");

// read the data
d3.csv('https://raw.githubusercontent.com/mmainzer/covid-recovery/master/application/app-data/covid.csv', d3.autoType)
	.then(function(data) {

		// list of areas to filter by
		const areas = d3.map(data, function(d){return(d.area_name)}).keys()
		const dates = ( d3.map(data, function(d){return(d.dateTwo)}).keys() ).length - 1

		// add x axis --> it is a date format
		let x = d3.scaleBand()
					.range([ 0, width ])
					.domain(data.map(function(d) { return d.dateTwo; }))
					.padding(0.2);

		// let xAxis = d3.axisBottom(x).tickValues(x.domain());
		let xAxis = d3.axisBottom(x).tickValues(x.domain().filter(function(d,i){ return !(i%dates)}));

		svgCases.append("g")
				.attr( "transform", "translate(0," + height + ")" )
				.call(xAxis);

		svgDeaths.append("g")
				.attr( "transform", "translate(0," + height + ")" )
				.call(xAxis);

		// add y axis for cases
		let yCases = d3.scaleLinear().range([height, 0]);
		yCases.domain([0, d3.max(data, function(d) { return d.daily_cases; }) + 5]);

		// add y axis for deaths
		let yDeaths = d3.scaleLinear().range([height, 0]);
		yDeaths.domain([0, d3.max(data, function(d) { return d.daily_deaths; }) + 5 ]);

		svgCases.append("g")
				.attr("class","y axis")
				.call(d3.axisLeft(yCases).ticks(5));

		svgDeaths.append("g")
				.attr("class","y axis")
				.call(d3.axisLeft(yDeaths).ticks(5));



		// create the bar charts
		let barsCases = svgCases.selectAll("barCases")
						.data(data.filter(function(d){return d.area_name==areas[0]}))
						.enter()
						.append("rect")
						.attr("class", "bar cases")
						.attr("x", function(d) { return x(d.dateTwo); })
					    .attr("y", function(d) { return yCases(d.daily_cases); })
					    .attr("width", x.bandwidth())
					    .attr("height", function(d) { return height - yCases(d.daily_cases); })
					    .attr("fill", "#cbc9e2")
					    .attr("border-color", "#9e9ac8")

		let barsDeaths = svgDeaths.selectAll("barDeaths")
						.data(data.filter(function(d){return d.area_name==areas[0]}))
						.enter()
						.append("rect")
						.attr("class", "bar cases")
						.attr("x", function(d) { return x(d.dateTwo); })
					    .attr("y", function(d) { return yDeaths(d.daily_deaths); })
					    .attr("width", x.bandwidth())
					    .attr("height", function(d) { return height - yDeaths(d.daily_deaths); })
					    .attr("fill", "#cccccc")
					    .attr("border-color", "#969696")


		// initialize lines with the first group of the list
		let lineCases = svgCases
					.append('g')
					.append("path")
						.datum(data.filter(function(d){return d.area_name==areas[0]}))
						.attr("d", d3.line()
							.curve(d3.curveMonotoneX)
							.x(function(d) { return x(d.dateTwo) })
							.y(function(d) { return yCases(+d.avg_cases_7 )})
						)
						.attr( "stroke", "#54278f" )
						.attr( "stroke-width", 3 )
						.style( "fill", "none" )

		let lineDeaths = svgDeaths
					.append('g')
					.append("path")
						.datum(data.filter(function(d){return d.area_name==areas[0]}))
						.attr("d", d3.line()
							.curve(d3.curveMonotoneX)
							.x(function(d) { return x(d.dateTwo) })
							.y(function(d) { return yDeaths(+d.avg_deaths_7 )})
						)
						.attr( "stroke", "#252525" )
						.attr( "stroke-width", 3 )
						.style( "fill", "none" )

		// function to update chart on geography select
		function update(selectedGeo) {

			// create new data with the selection
			var dataFilter = data.filter(function(d){return d.area_name==selectedGeo})

			// create new min and max for the y axis
			yCases.domain([0, d3.max(dataFilter, function(d) { return d.daily_cases; }) + 5]);
			yDeaths.domain([0, d3.max(dataFilter, function(d) { return d.daily_deaths; }) + 5]);

			// give new data to line for update
			lineCases
				.datum(dataFilter)
				.transition()
				.duration(1000)
				.attr("d", d3.line()
					.curve(d3.curveMonotoneX)
					.x(function(d) { return x(d.dateTwo); })
					.y(function(d) { return yCases(d.avg_cases_7); })
				)

			lineDeaths
				.datum(dataFilter)
				.transition()
				.duration(1000)
				.attr("d", d3.line()
					.x(function(d) { return x(d.dateTwo) })
					.y(function(d) { return yDeaths(d.avg_deaths_7) })
					.curve(d3.curveMonotoneX)
				)

			// give new data to bars for update
			barsCases
				.data(dataFilter)
				.transition()
				.duration(1000)
				.attr("y", function(d) { return yCases(d.daily_cases); })
				.attr("height", function(d) { return height - yCases(d.daily_cases); })

			barsDeaths
				.data(dataFilter)
				.transition()
				.duration(1000)
				.attr("y", function(d) { return yDeaths(d.daily_deaths); })
				.attr("height", function(d) { return height - yDeaths(d.daily_deaths); })

			// add an update to the y axis
			svgCases.select(".y.axis")
				.transition()
				.duration(1000)
				.call(d3.axisLeft(yCases).ticks(5));

			svgDeaths.select(".y.axis")
				.transition()
				.duration(1000)
				.call(d3.axisLeft(yDeaths).ticks(5));

			$('#geo').text(selectedGeo);
			$('#ccvi').text(kpiSelect[selectedGeo].CCVI_Score);
			$('#kpiOne').text(kpiSelect[selectedGeo].Cases);
			$('#kpiTwo').text(kpiSelect[selectedGeo].Deaths);
			$('#kpiThree').text(kpiSelect[selectedGeo].CasesPer1K);
			$('#kpiFour').text(kpiSelect[selectedGeo].Recent_Cases);


		}

		// when the geography level is selected, the actual geography value will have changed
		// but jquery will not recognize this, so we have to make it explicit
		$("#level-select").change(function() {
			// hide rc and msa layers
			map.setLayoutProperty('msaLines','visibility','none');
			map.setLayoutProperty('rcLines','visibility','none');
			let selectedLevel = $('#level-select option:selected').text()
			let selectedOption = $("#geo-select option").first().text();
			update(selectedOption);

			if (selectedLevel == 'MSA') {
				// hide rc layer
				map.setLayoutProperty('rcLines','visibility','none');
				map.setLayoutProperty('countyLines','visibility','none');
				// filter msa layer
				map.setFilter('msaLines',["match",["get","NAME"],selectedOption,true,false]);
				// show msa layer
				map.setLayoutProperty('msaLines','visibility','visible');
			} else if (selectedLevel == 'Regional Commission') {
				// hide msa layer
				map.setLayoutProperty('msaLines','visibility','none');
				map.setLayoutProperty('countyLines','visibility','none');
				// filter rc layer
				map.setFilter('rcLines',["match",["get","Regional Commission"],selectedOption,true,false]);
				// show rc layer
				map.setLayoutProperty('rcLines','visibility','visible');
			} else if (selectedLevel == 'County') {
				map.setLayoutProperty('msaLines','visibility','none');
				map.setLayoutProperty('rcLines','visibility','none');
				map.setFilter('countyLines',["match",["get","County"],selectedOption,true,false]);
				map.setLayoutProperty('countyLines','visibility','visible');
			} else {
				// hide rc and msa layers
				map.setLayoutProperty('msaLines','visibility','none');
				map.setLayoutProperty('rcLines','visibility','none');
				map.setLayoutProperty('countyLines','visibility','none');
			}
		});


		// when the drop down select is changed, run the update chart function
		$("#geo-select").change(function() {
			// recover selected option
			let selectedOption = d3.select(this).property("value")
			let selectedLevel = $('#level-select option:selected').text()
			// run the updated chart function with this selected option
			update(selectedOption);

			if (selectedLevel == 'MSA') {
				// hide rc layer
				map.setLayoutProperty('rcLines','visibility','none');
				map.setLayoutProperty('countyLines','visibility','none');
				// filter msa layer
				map.setFilter('msaLines',["match",["get","NAME"],selectedOption,true,false]);
				// show msa layer
				map.setLayoutProperty('msaLines','visibility','visible');
			} else if (selectedLevel == 'Regional Commission') {
				// hide msa layer
				map.setLayoutProperty('msaLines','visibility','none');
				map.setLayoutProperty('countyLines','visibility','none');
				// filter rc layer
				map.setFilter('rcLines',["match",["get","Regional Commission"],selectedOption,true,false]);
				// show rc layer
				map.setLayoutProperty('rcLines','visibility','visible');
			} else if (selectedLevel == 'County') {
				map.setLayoutProperty('msaLines','visibility','none');
				map.setLayoutProperty('rcLines','visibility','none');
				map.setFilter('countyLines',["match",["get","County"],selectedOption,true,false]);
				map.setLayoutProperty('countyLines','visibility','visible');
			} else {
				// hide rc and msa layers
				map.setLayoutProperty('msaLines','visibility','none');
				map.setLayoutProperty('rcLines','visibility','none');
				map.setLayoutProperty('countyLines','visibility','none');
			}

		});

})