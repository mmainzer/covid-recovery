// for line charts filtered by geography selection

// set the dimensions and margins for the chart
var margin = {top: 10, right: 30, bottom: 30, left: 60},
    width = 460 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#casesLine")
			  .append("svg")
			    .attr("width", width + margin.left + margin.right)
			    .attr("height", height + margin.top + margin.bottom)
			  .append("g")
			    .attr("transform",
			          "translate(" + margin.left + "," + margin.top + ")");

// date parser
const parser = d3.timeParse("%m-%d-%Y");

// read the data
d3.csv('https://raw.githubusercontent.com/mmainzer/covid-recovery/master/application/app-data/covid.csv', d3.autoType)
	.then(function(data) {
		// format dates correctly
		data.forEach(function(d) {
			d.date = parser(d.date);
		});

		console.log(data);
		// list of areas to filter by
		var areas = d3.map(data, function(d){return(d.area_name)}).keys()
		console.log(areas[0]);

		// add x axis --> it is a date format
		var x = d3.scaleLinear()
					.domain(d3.extent(data, function(d) {return d.date; }))
					.range([ 0, width ]);

		svg.append("g")
				.attr( "transform", "translate(0," + height + ")" )
				.call(d3.axisBottom(x).ticks(7));

		// add y axis
		var y = d3.scaleLinear()
					.domain([0, d3.max(data, function(d) { return +d.daily_cases; })])
					.range([ height, 0 ]);
		svg.append("g")
				.call(d3.axisLeft(y));

		// initialize line with the first group of the list
		var line = svg
					.append('g')
					.append("path")
						.datum(data.filter(function(d){return d.area_name==areas[0]}))
						.attr("d", d3.line()
							.x(function(d) { return x(d.date) })
							.y(function(d) { return y(+d.daily_cases )})
						)
						.attr( "stroke", "black" )
						.attr( "stroke-width", 4 )
						.style( "fill", "none" )

		// function to update chart on geography select
		function update(selectedGeo) {

			// create new data with the selection
			var dataFilter = data.filter(function(d){return d.area_name==selectedGeo})

			// create new min and max for each axis

			// give new data to line for update
			line
				.datum(dataFilter)
				.transition()
				.duration(1000)
				.attr("d", d3.line()
					.x(function(d) { return x(d.date) })
					.y(function(d) { return y(+d.daily_cases ) })
				)

			// add an update to the y axis

			// add an update to the x axis
		}

		// when the drop down select is changed, run the update chart function
		d3.select("#geo-select").on("change", function(d) {
			// recover selected option
			var selectedOption = d3.select(this).property("value")
			console.log(selectedOption);
			// run the updated chart function with this selected option
			update(selectedOption)
		})

})