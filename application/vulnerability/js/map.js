mapboxgl.accessToken = 'pk.eyJ1IjoibW1haW56ZXIiLCJhIjoiY2s5N2EyZXZtMTRjMTNocDM1Y3l3YmQ2OSJ9.QHEDzX1oIKjn8C13KG3vQQ';


const map = new mapboxgl.Map({
	container: 'map',
	style: 'mapbox://styles/mmainzer/ck94bk9gi12jq1iqmhnzfh0dm?fresh=true',
	center: [-82.993, 32.723],
	zoom: 6,
	scrollZoom: true,
	doubleClickZoom: true,
	renderWorldCopies: false,
	maxZoom: 8.75,
	minZoom: 6
});

// add zoom controls
map.addControl(new mapboxgl.NavigationControl());

// add a popup but don't add it to the map yet
let popupPoint = new mapboxgl.Popup({
	closeButton:false,
	closeOnClick:false
});

let popupPoly = new mapboxgl.Popup({
	closeButton:false,
	closeOnClick:false
});

// add necessary layers

map.on('load', function() {

	map.addSource('county-poly', {
		type: 'vector',
		url: 'mapbox://mmainzer.ck95njake1u0l2ko8bkdpsn17-2uthq?fresh=true'
	});

	map.addSource('county-points', {
		type: 'vector',
		url: 'mapbox://mmainzer.ck95o36v91dz12lo4awbp3gbv-90ft5?fresh=true'
	});

	map.addSource('hospitalPoints', {
		type: 'vector',
		url: 'mapbox://mmainzer.ck97opj7x2gfi2wo8v8585xtc-8do0y?fresh=true'
	});

	map.addSource('msa', {
		type: 'vector',
		url: 'mapbox://mmainzer.5r9p7e10?fresh=true'
	});

	map.addSource('rc', {
		type: 'vector',
		url: 'mapbox://mmainzer.1jivkh0l?fresh=true'
	});

	map.addLayer({
        'id':'countyFill',
        'type':'fill',
        'source':'county-poly',
        'layout': {
          'visibility':'visible',
        },
        'paint': {
          "fill-color": ["interpolate",
          					["linear"],
          					["get", "CCVI_Score"],
				          	0.19,"hsla(257, 30%, 95%, 0.8)",
				          	0.39,"hsla(245, 30%, 84%, 0.8)",
				          	0.59,"hsla(245, 29%, 69%, 0.8)",
				          	0.79,"hsla(249, 31%, 56%, 0.8)",
				          	0.99,"hsla(266, 57%, 36%, 0.8)"
						],
          "fill-opacity": 0.8,
          "fill-outline-color": "#fff"
        },
        'source-layer': 'countyData'
      }, 'road-label')

	map.addLayer({
		'id':'countyLines',
		'type':'line',
		'source':'county-poly',
		'layout': {
			'visibility':'none'
		},
		'paint': {
			'line-color':'#fff',
			'line-width':5
		},
		'source-layer':'countyData'
	}, 'road-label')

	map.addLayer({
		'id':'msaLines',
		'type':'line',
		'source':'msa',
		'layout': {
			'visibility':'none'
		},
		'paint': {
			'line-color':'#fff',
			'line-width':5
		},
		'source-layer':'gamsa'
	}, 'road-label')

	map.addLayer({
		'id':'rcLines',
		'type':'line',
		'source':'rc',
		'layout': {
			'visibility':'none'
		},
		'paint': {
			'line-color':'#fff',
			'line-width':5
		},
		'source-layer':'regionalcommissions'
	}, 'road-label')


	map.addLayer({
		'id':'points',
		'type':'circle',
		'source':'county-points',
		'layout': {
			'visibility':'visible'
		},
		'paint': {
			'circle-color':"hsla(0, 0%, 15%, 0.25)",
			'circle-opacity':1,
			'circle-stroke-color':"#252525",
			'circle-stroke-width':1,
			'circle-radius':[
							  "interpolate",
							  ["linear"],
							  ["get", "Cases_1000_Norm"],
							  0,1,
							  9,5,
							  19,7,
							  29,9,
							  39,11,
							  49,13,
							  59,15,
							  69,17,
							  79,19,
							  89,21,
							  99,23
							]
		},
		'source-layer':'countyPoints'
	}, 'ga-main-places')

	

	map.on('mouseenter', 'points', function(e) {
		
		// add functionality for popups, displaying information based on what
		// layers are selected in the dropdown
		let selectedPoint = $("#point-select option:selected").val();
		let selectedFill = $("#fill-select option:selected").val();
		let selectedPointFeature = selectObj.points[selectedPoint].var;
		let selectedFillFeature = selectObj.fills[selectedFill].var;
		let pointFeatureLabel = selectObj.points[selectedPoint].label;
		let fillFeatureLabel = selectObj.fills[selectedFill].label;
		console.log(selectedFill);
		console.log(selectedFillFeature);
		console.log(fillFeatureLabel);

		// change the cursor style when hovering
		map.getCanvas().style.cursor = 'pointer';

		let coordinates = e.features[0].geometry.coordinates.slice();
		let county = e.features[0].properties.County;
		let pointAttr = e.features[0].properties[selectedPointFeature];
		let fillAttr = e.features[0].properties[selectedFillFeature];
		let popHTML = '<h5 class=popHeader>'+county+'<h5>'+
					  '<p class=popFeature>'+pointAttr+' '+pointFeatureLabel+'<p>'+
					  '<p class=popFeature>'+fillAttr+' '+fillFeatureLabel+'<p>';

		// Ensure that if the map is zoomed out such that multiple
		// copies of the feature are visible, the popup appears
		// over the copy being pointed to.
		while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
			coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
		}

		// Populate the popup and set its coordinates based on the feature found
		popupPoint
			.setLngLat(coordinates)
			.setHTML(popHTML)
			.addTo(map);
	});

	map.on('mouseleave','points', function() {
		map.getCanvas().style.cursor = '';
		popupPoint.remove();
	});


});









